# Generated by Django 2.2.6 on 2019-11-17 18:21

from django.db import migrations


class Migration(migrations.Migration):
    def create_whitelist(app, schema_editor):
        Whitelist = app.get_model("api", "Whitelist")
        invites_whitelist = [
            "280033776820813825",  # Functional Programming
            "267624335836053506",  # Python Discord
            "440186186024222721",  # Python Discord: ModLog Emojis
            "273944235143593984",  # STEM
            "348658686962696195",  # RLBot
            "531221516914917387",  # Pallets
            "249111029668249601",  # Gentoo
            "327254708534116352",  # Adafruit
            "544525886180032552",  # kennethreitz.org
            "590806733924859943",  # Discord Hack Week
            "423249981340778496",  # Kivy
        ]
        channels_whitelist = [
            "365960823622991872",  # ADMINS
            "282638479504965634",  # MODLOG
            "467752170159079424",  # MESSAGE_LOG
            "622895325144940554",  # DEVLOG
            "468507907357409333",  # BBLOGS
            "464905259261755392",  # STAFF_LOUNGE
            "414574275865870337",  # DEVTEST
            "534321732593647616",  # TALENT_POOL
            "592000283102674944",  # USER_EVENT_A
        ]

        roles_whitelist = [
            "267628507062992896",  # ADMIN_ROLE
            "267629731250176001",  # MOD_ROLE
            "267627879762755584",  # OWNER_ROLE
            "458226413825294336",  # ROCKSTAR_ROLE
        ]
        extensions_whitelist = [
            ".3gp",
            ".3g2",
            ".avi",
            ".bmp",
            ".gif",
            ".h264",
            ".jpg",
            ".jpeg",
            ".m4v",
            ".mkv",
            ".mov",
            ".mp4",
            ".mpeg",
            ".mpg",
            ".png",
            ".tiff",
            ".wmv",
        ]
        existing_whitelists = {
            "channel": channels_whitelist,
            "role": roles_whitelist,
            "invite": invites_whitelist,
            "extension": extensions_whitelist,
        }
        for whitelist_type, whitelisted_items in existing_whitelists.items():
            for item in whitelisted_items:
                Whitelist.objects.create(type=whitelist_type, whitelisted_item=item)

    def delete_all_whitelist(app, schema_editor):
        Whitelist = app.get_model("api", "Whitelist")
        Whitelist.objects.delete()

    dependencies = [("api", "0049_whitelist")]

    operations = [
        migrations.RunPython(create_whitelist, delete_all_whitelist)
    ]
